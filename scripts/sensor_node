#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from std_msgs.msg import String
from json import dumps
import rospy
import socket
import ed25519
import binascii
import threading

class SensorNode:
    def __init__(self):
        rospy.init_node('sensor')

        # Sensor TCP socket
        server_address = rospy.get_param('~server_address').split(':')
        self.gw_addr = (server_address[0], int(server_address[1]))
        self.tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.tcp_sock.bind(self.gw_addr)
        self.tcp_sock.listen(1)

        # Ed25519 verification
        keydata = open(rospy.get_param('~verifying_key'), 'rb').read()
        self.verifying_key = ed25519.VerifyingKey(keydata)

        # Reciever loop
        threading.Thread(target=self.recv_loop, daemon=True).start()

        # ROS API
        self.pub = rospy.Publisher('~data', String, queue_size=128)

        rospy.loginfo('Node ' + rospy.get_name() + ' started.')
    
    def recv_loop(self):
        while not rospy.is_shutdown():
            try:
                conn, addr = self.tcp_sock.accept()
                signature = conn.recv(64)
                datalen = int(conn.recv(2))
                data = conn.recv(datalen)
                rospy.loginfo('[%s] :: Recieved: %s', addr, str(data))
                conn.send(1)
            except Exception as e:
                rospy.logwarn('[%s] :: Broken connection: %s', addr, e)
                continue

            msg = binascii.hexlify(data)
            sig = binascii.hexlify(signature)
            try:
                self.verifying_key.verify(sig, msg, encoding='hex')
                rospy.loginfo('Good signed message: %s', msg)
                json_data = dumps({'data': msg, 'signature': sig})
                self.pub.publish(String(data=str(json_data)))

            except ed25519.BadSignatureError as e:
                rospy.logwarn('Bad signature `%s` for `%s`', sig, msg)

    def spin(self):
        rospy.spin()
        

if __name__ == '__main__':
    SensorNode().spin()
