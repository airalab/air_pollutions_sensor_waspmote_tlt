#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from std_msgs.msg import String
from json import dumps
import rospy
import socket
import ed25519
import binascii
import threading

class SensorNode:
    def __init__(self):
        rospy.init_node('sensor')

        # Sensor UDP socket
        server_address = rospy.get_param('~server_address').split(':')
        self.gw_addr = (server_address[0], int(server_address[1]))
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.bind(self.gw_addr)

        # Ed25519 verification
        keydata = open(rospy.get_param('~verifying_key'), 'rb').read()
        self.verifying_key = ed25519.VerifyingKey(keydata)

        # Reciever loop
        threading.Thread(target=self.recv_loop, daemon=True).start()

        # ROS API
        self.pub = rospy.Publisher('~data', String, queue_size=128)

        rospy.loginfo('Node ' + rospy.get_name() + ' started.')
    
    def recv_loop(self):
        while not rospy.is_shutdown():
            try:
                packet, addr = self.sock.recvfrom(512)
                signature = packet[:128]
                data = packet[128:]
                rospy.loginfo('[%s] :: Recieved: signature=%s data=%s', addr[0], signature, data)

                self.verifying_key.verify(signature, data, encoding='hex')
                rospy.loginfo('[%s] :: Good signed message', addr[0])

                self.pub.publish(String(data=str(packet)))

            except ed25519.BadSignatureError as e:
                rospy.logwarn('[%s] :: Bad signature `%s` for `%s`', addr[0], signature, data)

            except Exception as e:
                rospy.logwarn('[%s] :: Something broken: %s', addr[0], e)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    SensorNode().spin()
